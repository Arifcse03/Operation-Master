package mnj.mfg.model.services;


import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnj.mfg.model.lov.views.operatingUnitsVOImpl;
import mnj.mfg.model.services.common.MainAM;

import mnj.mfg.model.views.DeatilsEOViewImpl;
import mnj.mfg.model.views.FillOperationVOImpl;
import mnj.mfg.model.views.MnjMfgOperationMasterLViewImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 23 15:20:05 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MainAMImpl extends ApplicationModuleImpl implements MainAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MainAMImpl() {
    }


    /**
     * Container's getter for MnjMfgOperationMasterHView1.
     * @return MnjMfgOperationMasterHView1
     */
    public ViewObjectImpl getMnjMfgOperationMasterHView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgOperationMasterHView1");
    }


    /**
     * Container's getter for MnjMfgOperationMasterLView1.
     * @return MnjMfgOperationMasterLView1
     */
    public ViewObjectImpl getMnjMfgOperationMasterLView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgOperationMasterLView1");
    }

    /**
     * Container's getter for MnjMfgOperationMasterHFkLink1.
     * @return MnjMfgOperationMasterHFkLink1
     */
    public ViewLinkImpl getMnjMfgOperationMasterHFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgOperationMasterHFkLink1");
    }

    /**
     * Container's getter for DeatilsEOView1.
     * @return DeatilsEOView1
     */
    public ViewObjectImpl getDeatilsEOView1() {
        return (ViewObjectImpl)findViewObject("DeatilsEOView1");
    }

    /**
     * Container's getter for MnjMfgOperationMasterDFkLink1.
     * @return MnjMfgOperationMasterDFkLink1
     */
    public ViewLinkImpl getMnjMfgOperationMasterDFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgOperationMasterDFkLink1");
    }


    /**
     * Container's getter for PopHeader1.
     * @return PopHeader1
     */
    public ViewObjectImpl getPopHeader1() {
        return (ViewObjectImpl)findViewObject("PopHeader1");
    }

    /**
     * Container's getter for popLines1.
     * @return popLines1
     */
    public ViewObjectImpl getpopLines1() {
        return (ViewObjectImpl)findViewObject("popLines1");
    }

    /**
     * Container's getter for PopDetails1.
     * @return PopDetails1
     */
    public ViewObjectImpl getPopDetails1() {
        return (ViewObjectImpl)findViewObject("PopDetails1");
    }


    public void copyMethod(String stn) {
    }


    public void copyMethodNew(String style) {

        System.out.println("STN AM --->" + style);
        ViewObject hvo = getPopHeader1();
        hvo.setWhereClause("HEADER_ID = " + style);
        hvo.executeQuery();

        System.out.println("After header execute--->");

        RowSetIterator it = hvo.createRowSetIterator("hit");
        String headerId = null;
        while (it.hasNext()) {
            Row r = it.next();
            System.out.println("Heade Loop Starts-->");
            headerId = r.getAttribute("HeaderId").toString();
            System.out.println("Heade Loop-->");
        }
        it.closeRowSetIterator();

        ViewObject linesVo = getpopLines1();
        linesVo.setWhereClause("HEADER_ID = " + headerId);
        linesVo.executeQuery();
        System.out.println("Lines----->starts");
        RowSetIterator itLines = linesVo.createRowSetIterator("linesIt");
        while (itLines.hasNext()) {
            Row r = itLines.next();
            System.out.println("Lines Loop-->");
            populteLines(r);
            populteDetails(r);
        }
        itLines.closeRowSetIterator();

    }

    public Row createLines() {
        ViewObject vo = getMnjMfgOperationMasterLView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public Row createDetails() {
        ViewObject vo = getDeatilsEOView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public void populteLines(Row r) {

        Row lineRow = createLines();

        try {
            lineRow.setAttribute("DeptId",
                                 r.getAttribute("DeptId").toString());

        } catch (Exception e) {
            ;
        }
        try {
            lineRow.setAttribute("DeptName",
                                 r.getAttribute("DeptName").toString());
        } catch (Exception e) {
            ;
        }

        try {
            lineRow.setAttribute("DeptNo",
                                 r.getAttribute("DeptNo").toString());
        } catch (Exception e) {
            ;
        }


    }

    public void populteDetails(Row r) {

        ViewObject detVo = getPopDetails1();
        detVo.setWhereClause("LINE_ID =" +
                             r.getAttribute("LineId").toString());
        detVo.executeQuery();

        RowSetIterator itDetails = detVo.createRowSetIterator("DIt");
        while (itDetails.hasNext()) {
            Row row = itDetails.next();
            Row detRow = createDetails();


            try {
                detRow.setAttribute("MinorOperation",
                                    row.getAttribute("MinorOperation").toString());
            } catch (Exception e) {
                ;
            }
            try {
                detRow.setAttribute("MajorOperation",
                                    row.getAttribute("MajorOperation").toString());
            } catch (Exception e) {
                ;
            }
            try {
                detRow.setAttribute("OperationCode",
                                    row.getAttribute("OperationCode").toString());
            } catch (Exception e) {
                ;
            }
            try {
                detRow.setAttribute("MachineType",
                                    row.getAttribute("MachineType").toString());
            } catch (Exception e) {
                ;
            }

            try {
                detRow.setAttribute("MajorOpId",
                                    row.getAttribute("MajorOpId").toString());
            } catch (Exception e) {
                ;
            }

            try {
                detRow.setAttribute("Smv", row.getAttribute("Smv").toString());
            } catch (Exception e) {
                ;
            }
            try {
                detRow.setAttribute("Opration",
                                    row.getAttribute("Opration").toString());
            } catch (Exception e) {
                ;
            }


        }
        itDetails.closeRowSetIterator();


    }

    @Override
    public void afterCommit(TransactionEvent transactionEvent) {
        super.afterCommit(transactionEvent);
        FacesContext context = FacesContext.getCurrentInstance();
        FacesMessage message = new FacesMessage("Record saved Successfully");
        context.addMessage(null, message);
        
    }

    /**
     * Container's getter for FillOperation1.
     * @return FillOperation1
     */
    public FillOperationVOImpl getFillOperation1() {
        return (FillOperationVOImpl)findViewObject("FillOperation1");
    }

    /** Start For Pop-Up of Fill Operation  **/

    public void callOperationFetch() {
        ViewObject populatevo = getFillOperation1();
        if (populatevo.getRowCount() == 0)
            ;
        RowSetIterator it = populatevo.createRowSetIterator("aaa");
        Row r[] = populatevo.getAllRowsInRange();
        for (Row row : r) {
            System.out.println("loop count");
            try {
                String flag = row.getAttribute("CheckBoxOperation").toString();
                System.out.println("Flag Code -->" + flag);
                if (flag.equals("true"))
                    populateOperationLines(row);


            } catch (Exception e) {
                ;
            }


        }

        it.closeRowSetIterator();
    }

    public void populateOperationLines(Row poprow) {

        ViewObject vo = getDeatilsEOView1();
        Row linerow = createOperationLines();


        linerow.setAttribute("OperationCode",
                             getPopulateValue(poprow, "OperationCode"));
        linerow.setAttribute("MajorOperation",
                             getPopulateValue(poprow, "MajorOperation"));
        linerow.setAttribute("MinorOperation",
                             getPopulateValue(poprow, "MinorOperation"));
        linerow.setAttribute("Smv", getPopulateValue(poprow, "Sam"));
        linerow.setAttribute("MachineType",
                             getPopulateValue(poprow, "Machinetype"));


    } //end of populateLines

    //            public void populateOperationLines1() {
    //
    //
    //                ViewObject populatevo = getFillOperation1();
    //
    //
    //            } //end of populateOrderLines method

    ////////////////////////////////////

    public void whereClasDeptName(String style) {
        ViewObject populatevo = getFillOperation1();
        System.out.println("enter in whereClasDeptName AM-->");


        // String aa = getstyle();

        populatevo.setWhereClause("DEPTNAME = " + "'" + style + "'");
        //populatevo.setWhereClause("STYLE_NAME = '"+aa+"' and COLOR = '"+bb+"'");
        System.out.println("whereClasDeptName usman in AM-->" + style);

        populatevo.executeQuery();
        System.out.println(populatevo.getQuery());
    }

    ///////////////////////////////////

    public String getstyle() {
        System.out.println("enter in getstyle1 -->");

        ViewObject vo = getMnjMfgOperationMasterLView1();
        String Style = null;
        try {

            Style = vo.getCurrentRow().getAttribute("DeptName").toString();

        } catch (Exception e) {
            // TODO: Add catch code
            ;
        }
        System.out.println("enter in getstyle1 -->" + Style);
        return Style;
    }

    ////////////////////////////////////


    public Row createOperationLines() {

        ViewObject vo = getDeatilsEOView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    /** End For Fill Operation  **/


    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        if (userId != null) {
            // String flag = getFlagValue(userId, respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //  userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("unitName", getUnitName(orgId));
        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getoperatingUnitsVO1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name;

    }
    ///////////////////////////////////////////////////////////////////////////////

    public void Save() {
        getDBTransaction().commit();
        Total_SAM_Value_Calc();
    }

    public void Total_SAM_Value_Calc() {

        Double SMV = 0.0;
        Double SAM = 0.0;

        getDBTransaction().commit();

        System.out.println("In Total_SAM_Value_Calc method.... ");

        ViewObject lvo = this.getMnjMfgOperationMasterLView1();
        RowSetIterator lvoit = lvo.createRowSetIterator("lvoit");

        while (lvoit.hasNext()) {

            Row linesNext = lvoit.next();
            String LineId = null;
            SAM = 0.00;

            try {
                LineId = linesNext.getAttribute("LineId").toString();
            } catch (Exception e) {
                ;
            }

            RowSet DetailVO1it =
                (RowSet)linesNext.getAttribute("DeatilsEOView");

            while (DetailVO1it.hasNext()) {

                Row detailNext = DetailVO1it.next();

                String Detail_Id = null;
                try {
                    Detail_Id = detailNext.getAttribute("DetailId").toString();
                } catch (Exception e) {
                    ;
                }

                try {
                    SMV =
Double.parseDouble(detailNext.getAttribute("Smv").toString());
                    System.out.println("SMV Value is... " + SMV);
                } catch (Exception ee) {
                    SMV = 0.0;
                    System.out.println("Exception SMV");
                }

                SAM = SMV + SAM;
            }
            DetailVO1it.closeRowSetIterator();
            linesNext.setAttribute("TotalSamValue", SAM);
            System.out.println(" Total SAM is... " + SAM);
        }
        lvoit.closeRowSetIterator();
        System.out.println("Save.....");

        this.getDBTransaction().commit();
    }


    /**
     * Container's getter for operatingUnitsVO1.
     * @return operatingUnitsVO1
     */
    public operatingUnitsVOImpl getoperatingUnitsVO1() {
        return (operatingUnitsVOImpl)findViewObject("operatingUnitsVO1");
    }
}
